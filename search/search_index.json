{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MicroBIM Fire Documentation","text":"<p>At MicroBIM Fire, we are dedicated to providing comprehensive and well-structured documentation for our libraries, tailored to meet the needs of developers in the AEC industry.</p> <p>Our documentation covers:</p> <ul> <li>Revit Extensions: A library offering robust tools and APIs to extend Revit's functionality, enabling seamless automation and enhanced workflows.</li> <li>WPF UI Library: A collection of intuitive user interface components designed specifically for WPF-based Revit applications.</li> <li>Revit Geometry Manipulation: Tools for handling and processing Revit's geometric data with precision and efficiency.</li> <li>Revit Data Handling: Clear guidance for accessing, managing, and processing Revit's data models.</li> </ul> <p>With practical examples, real-world use cases, and detailed explanations, our documentation ensures that developers can effectively integrate our tools into their workflows. By empowering developers to innovate, we aim to drive productivity and foster advancements in the AEC industry.</p> <p>Explore the following sections to get started: - Classes - About</p> <p>Let\u2019s build the future together!</p>"},{"location":"About/","title":"About MicroBIM","text":"<p>With products boosting efficiency, reliability, and productivity of tedious everyday BIM workflows, MicroBIM has been established to revolutionize apps for the everchanging construction industry worldwide. MicroBIM Fire (formerly PipeFab) is software born out of the need to make Revit more adaptable to Fire Design.</p> <p>Starting in 2017, we initially developed the software to streamline the pipe fabrication process. It has now grown into a complete suite of Fire Design tools for modeling, fabricating, and hydraulically calculating Fire systems. With an experienced team of Fire Design Engineers and Software Developers, we have tailored MicroBIM Fire to make designing in Revit as efficient and accurate as possible.</p> <p>Working alongside valued clients, providing continuous support and training, MicroBIM Fire has changed the way we design Fire Systems in Revit. We are keen to deliver the MicroBIM Fire software experience to many more designers and engineers around the world.</p>  Copyright \u00a9 2018 - Present MICROBIM | All Rights Reserved."},{"location":"Home/","title":"Welcome to MicroBIM Fire Documentation","text":"<p>At MicroBIM Fire, we are dedicated to providing comprehensive and well-structured documentation for our libraries, tailored to meet the needs of developers in the AEC industry.</p> <p>Our documentation covers:</p> <ul> <li>Revit Extensions: A library offering robust tools and APIs to extend Revit's functionality, enabling seamless automation and enhanced workflows.</li> <li>WPF UI Library: A collection of intuitive user interface components designed specifically for WPF-based Revit applications.</li> <li>Revit Geometry Manipulation: Tools for handling and processing Revit's geometric data with precision and efficiency.</li> <li>Revit Data Handling: Clear guidance for accessing, managing, and processing Revit's data models.</li> </ul> <p>With practical examples, real-world use cases, and detailed explanations, our documentation ensures that developers can effectively integrate our tools into their workflows. By empowering developers to innovate, we aim to drive productivity and foster advancements in the AEC industry.</p> <p>Explore the following sections to get started: - Classes - About</p> <p>Let\u2019s build the future together!</p>"},{"location":"Revit%20Extensions/","title":"Classes","text":"<ul> <li>CollectionExtensions</li> <li>DocumentExtensions</li> </ul>"},{"location":"Revit%20Extensions/CollectionExtensions/","title":"CollectionExtensions","text":"<p>Summary: Provides extension methods for working with collections.</p>"},{"location":"Revit%20Extensions/CollectionExtensions/#methods","title":"Methods","text":""},{"location":"Revit%20Extensions/CollectionExtensions/#toobservablecollection1systemcollectionsgenericienumerable0","title":"ToObservableCollection<code>1(System.Collections.Generic.IEnumerable{</code>0})","text":"<p>Summary: Converts an enumerable collection to an ObservableCollection.</p>"},{"location":"Revit%20Extensions/CollectionExtensions/#parameters","title":"Parameters:","text":"<ul> <li><code>source</code>: The source enumerable collection to convert.</li> </ul>"},{"location":"Revit%20Extensions/CollectionExtensions/#returns","title":"Returns:","text":"<p>An ObservableCollection containing the elements from the source.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/","title":"DocumentExtensions","text":"<p>Summary: Provides extension methods for the Autodesk Revit API.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#methods","title":"Methods","text":""},{"location":"Revit%20Extensions/DocumentExtensions/#getfamilytypesbycategoryorderedbynameautodeskrevitdbdocumentautodeskrevitdbbuiltincategory","title":"GetFamilyTypesByCategoryOrderedByName(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)","text":"<p>Summary: Retrieves all family types of the specified category from the given Revit document as an ObservableCollection.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#parameters","title":"Parameters:","text":"<ul> <li><code>doc</code>: The Revit document to search for family types.</li> <li><code>category</code>: The BuiltInCategory to filter family types.</li> </ul>"},{"location":"Revit%20Extensions/DocumentExtensions/#returns","title":"Returns:","text":"<p>An ObservableCollection containing all FamilySymbol objects representing the specified category.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#getlevelsorderedbyproperty1autodeskrevitdbdocumentsystemfuncautodeskrevitdblevel0systemboolean","title":"GetLevelsOrderedByProperty<code>1(Autodesk.Revit.DB.Document,System.Func{Autodesk.Revit.DB.Level,</code>0},System.Boolean)","text":"<p>Summary: Retrieves all levels from the specified Revit document as an ObservableCollection,             with dynamic ordering based on a specified property.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#parameters_1","title":"Parameters:","text":"<ul> <li><code>doc</code>: The Revit document to search for levels.</li> <li><code>keySelector</code>: A function to extract a key from a Level for ordering.</li> <li><code>ascending</code>: If true, orders levels in ascending order; otherwise, descending.</li> </ul>"},{"location":"Revit%20Extensions/DocumentExtensions/#returns_1","title":"Returns:","text":"<p>An ObservableCollection containing Level objects, ordered dynamically by the specified property.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#getrebarshapesautodeskrevitdbdocument","title":"GetRebarShapes(Autodesk.Revit.DB.Document)","text":"<p>Summary: Retrieves all rebar shapes from the specified Revit document.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#parameters_2","title":"Parameters:","text":"<ul> <li><code>doc</code>: The Revit document to retrieve rebar shapes from.</li> </ul>"},{"location":"Revit%20Extensions/DocumentExtensions/#returns_2","title":"Returns:","text":"<p>A list of RebarShape objects available in the document.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#getrebarbartypesautodeskrevitdbdocument","title":"GetRebarBarTypes(Autodesk.Revit.DB.Document)","text":"<p>Summary: Retrieves all rebar bar types from the specified Revit document as an ObservableCollection.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#parameters_3","title":"Parameters:","text":"<ul> <li><code>doc</code>: The Revit document to retrieve rebar bar types from.</li> </ul>"},{"location":"Revit%20Extensions/DocumentExtensions/#returns_3","title":"Returns:","text":"<p>An ObservableCollection containing all RebarBarType objects in the document.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#createandplacecolumnatpointautodeskrevitdbdocumentautodeskrevitdbxyzautodeskrevitdbfamilysymbolautodeskrevitdblevelautodeskrevitdblevel","title":"CreateAndPlaceColumnAtPoint(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.FamilySymbol,Autodesk.Revit.DB.Level,Autodesk.Revit.DB.Level)","text":"<p>Summary: Prompts the user to select a point and places a column at that point.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#parameters_4","title":"Parameters:","text":"<ul> <li><code>doc</code>: The Revit document where the column will be placed.</li> <li><code>point</code>: The XYZ point where the column will be placed.</li> <li><code>columnType</code>: The FamilySymbol representing the column type.</li> <li><code>baseLevel</code>: The base level of the column.</li> <li><code>topLevel</code>: The top level of the column.</li> </ul>"},{"location":"Revit%20Extensions/DocumentExtensions/#returns_4","title":"Returns:","text":"<p>The created column Element, or null if no column was created.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#searchorcreate3dviewautodeskrevitdbdocumentsystemstring","title":"SearchOrCreate3DView(Autodesk.Revit.DB.Document,System.String)","text":"<p>Summary: Searches for a 3D view with the specified name. If it exists, returns it. Otherwise, creates a new 3D view.</p>"},{"location":"Revit%20Extensions/DocumentExtensions/#parameters_5","title":"Parameters:","text":"<ul> <li><code>doc</code>: The Revit document to search or create the 3D view in.</li> <li><code>viewName</code>: The name of the 3D view to search for or create.</li> </ul>"},{"location":"Revit%20Extensions/DocumentExtensions/#returns_5","title":"Returns:","text":"<p>The existing or newly created View3D object.</p>"}]}